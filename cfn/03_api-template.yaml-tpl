Transform: AWS::Serverless-2016-10-31

Description: >
  Stack: ¤stack-name¤-¤env¤
Parameters:
  CognitoStackName:
    Type: String
    Default: ¤cognito-stack-name¤-¤env¤


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Runtime: python3.8
    # CodeUri: ../src/
    CodeUri: ¤relative-path-src¤/
    Timeout: 900
    KmsKeyArn : ¤cmk_id¤
    Layers:
      - !Ref CovcovLibsLayer
    VpcConfig:
      SecurityGroupIds:
        - sg-¤sg-id¤
      SubnetIds:
        - subnet-¤subnet-id_1¤
        - subnet-¤subnet-id_2¤
        # - subnet-¤subnet-id_3¤
  Api:
    EndpointConfiguration:
      Type: REGIONAL
    GatewayResponses:
      UNAUTHORIZED:
        StatusCode: 401
        ResponseParameters:
          Headers:
            Access-Control-Allow-Origin: "'*'"
    Cors:
      AllowMethods: "'POST, GET, OPTIONS'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
    # AccessLogSetting:  # Permet d'affiner la configuration de la LOG
    # MethodSettings:


Resources:
  CovcovLog:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  # https://bryson3gps.wordpress.com/2018/12/06/trick-sam-into-building-your-lambda-layers/
  # https://github.com/aws/aws-sam-cli/pull/840
  CovcovLibsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Dependencies base layer for python apps
      ContentUri: ./.aws-sam-¤stack-name¤/build/FakeFunction/
      LayerName: covcov-libs
      RetentionPolicy: Retain # Retain  Delete
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  CovcovApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        Authorizers:
          CovcovCompanyAuthorizer:
            # UserPoolArn: !Sub ${UserPoolArnCompany}
            UserPoolArn:
              Fn::ImportValue:
                Fn::Sub: "${CognitoStackName}-UserPoolArn"
            Identity:
              Header: auth-id-token
# Add role cloudwatchlog:   AmazonAPIGatewayPushToCloudWatchLogs / covcov-api-gateway-DEV-CloudWatchLog

  CompanyDomainFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Handler: lambda_company_domain.handle
      Events:
        CovcovApi:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /company_domain
            Method: post
            RestApiId: !Ref CovcovApi  # <-- Implicit API: !Ref ServerlessRestApi
            Auth:
              Authorizer: CovcovCompanyAuthorizer

  CompanyCasContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_cas_contact.handle
      Events:
        CovcovApi:
          Type: Api
          Properties:
            Path: /c_ccontact
            Method: post
            RestApiId: !Ref CovcovApi
            Auth:
              Authorizer: CovcovCompanyAuthorizer

  VisitDomainFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_visit_domain.handle
      Events:
        CovcovApi:
          Type: Api
          Properties:
            Path: /visit_domain
            Method: post
            RestApiId: !Ref CovcovApi

  FakeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_fake.handle
      # CodeUri: ../src/layers/fakepackage/
      CodeUri: ¤relative-path-src¤/layers/fakepackage/



Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  CovcovApi:
    Description: "API Gateway endpoint URL for Prod stage for CovcovApi functions"
    # Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
    Value: !Sub "https://${CovcovApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  CompanyDomainFunction:
    Description: "Company Domain Lambda Function ARN"
    Value: !GetAtt CompanyDomainFunction.Arn
  CompanyCasContactFunction:
    Description: "Company CasContact Lambda Function ARN"
    Value: !GetAtt CompanyCasContactFunction.Arn
  VisitDomainFunction:
    Description: "Visit Domain Lambda Function ARN"
    Value: !GetAtt VisitDomainFunction.Arn
  CompanyDomainFunctionIamRole:
    Description: "Implicit IAM Role created for CompanyDomainFunction"
    Value: !GetAtt CompanyDomainFunctionRole.Arn
  VisitDomainFunctionIamRole:
    Description: "Implicit IAM Role created for CompanyDomainFunction"
    Value: !GetAtt VisitDomainFunctionRole.Arn